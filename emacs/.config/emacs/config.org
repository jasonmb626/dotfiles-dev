TITLE: Jason's Emacs config
#+AUTHOR: Jason Brunelle
#+COAUTHOR: Derek Taylor (DT)
#+DESCRIPTION: Jason's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* TABLE OF CONTENTS :toc:
- [[#acknowledgements][Acknowledgements]]
- [[#preamble][Preamble]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup][BACKUP]]
- [[#company][COMPANY]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#elfeed][ELFEED]]
- [[#evil][EVIL]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
  - [[#list][list]]
  - [[#org-hook-stuff][Org hook stuff]]
  - [[#babel-tangle][Babel tangle]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#language-support][LANGUAGE SUPPORT]]
- [[#lsp][LSP]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-superstar][Enabling Org Superstar]]
  - [[#diminish-org-indent-mode][Diminish Org Indent Mode]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#directories][Directories]]
  - [[#enforcementsone-line-config-options][Enforcements/one-line config options]]
  - [[#clocking-inout][Clocking in/out]]
  - [[#tags][Tags]]
  - [[#autocmds][Autocmds]]
  - [[#capture-templates][Capture templates]]
  - [[#agenda-stuff][Agenda stuff]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#sane-defaults][SANE DEFAULTS]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
- [[#tldr][TLDR]]
- [[#transparency][TRANSPARENCY]]
- [[#which-key][WHICH-KEY]]

* Acknowledgements
This config relied heavily as a base on:
https://www.youtube.com/playlist?list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX
https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ


* Preamble
#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

#+end_src

* IMPORTANT PROGRAMS TO LOAD FIRST
To keep this =config.org= a reasonable length, I have moved a lot of code to individual scripts that will be sourced by this config.  These scripts are found in "~/.config/emacs/scripts" and do not contain any code that most people are likely to need to edit.

** Adding the scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/third-party-scripts/")
#+end_src

** Sourcing the scripts
#+begin_src emacs-lisp
(require 'elpaca)  ;; The Elpaca Package Manager
(require 'buffer-move)   ;; Buffer-move for better window management
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BACKUP 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay 0.0)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))

(with-eval-after-load 'company
    (define-key company-active-map (kbd "<return>") nil)
      (define-key company-active-map (kbd "RET") nil)
        (define-key company-active-map (kbd "C-l") #'company-complete-selection))
#+end_src

Note: lsp-mode consistently fails downloading with elpaca. Not sure why. Manually downloading after fail seems to fix the issue.

#+begin_src shell :tangle no
cd ~/.config/emacs/elpaca/repos
git clone --depth 1 https://github.com/emacs-lsp/lsp-mode.git
#+end_src
* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)

#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

#+end_src

* ELFEED
An RSS newsfeed reader for Emacs.  Move through the articles with 'j/k'.  Move through the stories with 'CTRL j/k' when in other frame.

#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                       (("https://www.reddit.com/r/linux.rss" reddit linux)
                        ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                        ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                        ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                        ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                        ("https://hackaday.com/blog/feed/" hackaday linux)
                        ("https://opensource.com/feed" opensource linux)
                        ("https://linux.softpedia.com/backend.xml" softpedia linux)
                        ("https://itsfoss.com/feed/" itsfoss linux)
                        ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                        ("https://www.phoronix.com/rss.php" phoronix linux)
                        ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                        ("https://www.computerworld.com/index.rss" computerworld linux)
                        ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                        ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                        ("https://betanews.com/feed" betanews linux)
                        ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                        ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
 

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

#+end_src

#+RESULTS:

* EVIL
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs.  Because...let's face it.  The Vim keybindings are just plain better.

#+begin_src emacs-lisp
    ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
            evil-want-keybinding nil
            evil-vsplit-window-right t
            evil-split-window-below t
            evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
      (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    ;; Do not uncomment this unless you want to specify each and every mode
    ;; that evil-collection should works with.  The following line is here 
    ;; for documentation purposes in case you need it.  
    ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
    (evil-collection-init))

  (use-package evil-tutor)

  ;; Using RETURN to follow links in Org/Evil 
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)

  ;;Evil goggles will give visual indication of what we just did in evil mode. Especially briefly highlight what we just yanked.
  (use-package evil-goggles
        :config
          (evil-goggles-mode)

             ;; optionally use diff-mode's faces; as a result, deleted text
            ;; will be highlighed with `diff-removed` face which is typically
            ;; some red color (as defined by the color theme)
            ;; other faces such as `diff-added` will be used for other actions
            (evil-goggles-use-diff-faces))
#+end_src

* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

#+end_src

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "FiraMono Nerd Font"
  :height 110
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "FiraMono Nerd Font Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GENERAL KEYBINDINGS
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer my/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (general-create-definer my/lleader-keys
    :states '(normal visual emacs)
    :keymaps 'org-mode-map
    :prefix "," ;; set leader
  )

  (my/lleader-keys
   "," 'org-ctrl-c-ctrl-c
   "RET" 'org-ctrl-c-ret
   "[" 'org-agenda-file-to-front
   "]" 'org-remove-file
   "a" 'org-agenda
   "c" 'org-capture
   )
  
  (my/lleader-keys
    "b" '(:ignore t :wk "babel")
    "b f" 'org-babel-tangle-file
    "b t" 'org-babel-tangle
  )

  (my/lleader-keys
    "d" '(:ignore t :wk "dates/times/clocks")
    "d =" 'org-resolve-clocks
    "d c" 'org-clock-cancel
    "d d" 'org-deadline
    "d e" 'org-evaluate-time-range
    "d g" 'org-clock-goto
    "d i" 'org-clock-in
    "d j" 'my/org-clock-jump-to-current-clock
    "d l" 'org-clock-in-last
    "d o" 'org-clock-out
    "d p" 'org-pomodoro
    "d r" 'org-clock-report
    "d s" 'org-schedule
    "d t" 'org-time-stamp
    "d T" 'org-time-stamp-inactive
    "d u" 'org-clock-display
  )

  (my/lleader-keys
    "e" '(:ignore t :wk "export")
  )

  (my/lleader-keys
    "f" '(:ignore t :wk "feeds")
  )

  (my/lleader-keys
    "i" '(:ignore t :wk "insert")
    "i b" 'org-insert-structure-template
    "i d" 'org-insert-drawer
    "i e" 'org-set-effors
    "i f" 'org-footnote-new
    "i h" 'org-insert-heading
    "i i" 'org-insert-item
    "i l" 'org-insert-link
    "i n" 'org-insert-note
    "i p" 'org-set-property
    "i r" 'org-rich-yank
    "i s" 'org-insert-subheading
    "i t" 'org-set-tags-command
    "i H" 'org-insert-heading-after-current
    "i K" 'insert-keybinding-org
    "i L" 'org-cliplink
    "i D" '(:ignore t :wk "download")
  )

  (my/lleader-keys
    "m" '(:ignore t :wk "more")
  )

  (my/lleader-keys
    "s" '(:ignore t :wk "trees/subtrees")
    "s a" 'org-toggle-archive-tag
    "s b" 'org-tree-to-indirect-buffer
    "s d" 'org-cut-subtree
    "s h" 'org-promote-subtree
    "s j" 'org-move-subtree_down
    "s k" 'org-move-subtree_up
    "s l" 'org-demote-subtree
    "s n" 'org-narrow-to-subtree
    "s p" 'org-paste-subtree
    "s r" 'org-refile
    "s s" 'org-sparse-tree
    "s w" 'widen
    "s y" 'org-copy-subtree
    "s A" 'org-archive-subtree-default
    "s S" 'org-sort
  )

  (my/lleader-keys
    "t" '(:ignore t :wk "tables")
    "t a" 'org-table-align
    "t b" 'org-table-blank-field
    "t c" 'org-table-convert
    "t e" 'org-table-eval-formula
    "t f" 'org-table-fields-info
    "t h" 'org-table-previous-field
    "t j" 'org-table-next-row
    "t l" 'org-table-next-field
    "t n" 'org-table-create
    "t p" 'org-plot/gnuplot
    "t r" 'org-table-reclalculate
    "t s" 'org-table-sort-time
    "t w" 'org-table-wrap-region
    "t E" 'org-table-export
    "t H" 'org-table-move-column-left
    "t I" 'org-table-import
    "t J" 'org-table-move-row-down
    "t K" 'org-table-move-row-up
    "t L" 'org-table-move-columns-left
    "t N" 'org-table-create-with-table.el
    "t R" 'org-table-recalculate-buffer-t...
    "t d" '(:ignore t :wk "delete")
    "t i" '(:ignore t :wk "insert")
    "t t" '(:ignore t :wk "toggle")
  )

  (my/lleader-keys
    "x" '(:ignore t :wk "text")
    "x o" 'org-open-at-point
  )

  (my/lleader-keys
    "T" '(:ignore t :wk "toggles")
    "T c" 'org-toggle-checkbox
    "T e" 'org-toggle-pretty-entities
    "T i" 'org-toggle-inline-images
    "T l" 'org-toggle-link-display
    "T n" 'org-num-mode
    "T t" 'org-show-todo-tree
    "T x" 'org-latex-preview
    "T T" 'org-todo
  )

  (my/leader-keys
    "SPC" 'counsel-M-x
    "RET" 'org-insert-heading-respect-content
    "." 'find-file
    "=" 'perspective-map ;; Lists all the perspective keybindings
    "TAB TAB" 'comment-line
    "u" 'universal-argument)

  (my/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" 'ido-switch-to-buffer
    "b c" 'clone-indirect-buffer
    "b C" 'clone-indirect-buffer-other-window
    "b d" 'bookmark-delete
    "b i" 'ibuffer
    "b k" 'kill-current-buffer
    "b K" 'kill-some-buffers
    "b l" 'list-bookmarks
    "b m" 'bookmark-set
    "b n" 'next-buffer
    "b p" 'previous-buffer
    "b r" 'revert-buffer
    "b R" 'rename-buffer
    "b s" 'basic-save-buffer
    "b S" 'save-some-buffers
    "b w" 'bookmark-save)

  (my/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" 'dired
    "d j" 'dired-jump
    "d n" 'neotree-dir
    "d p" 'peep-dired)

  (my/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")    
    "e b" 'eval-buffer
    "e d" 'eval-defun
    "e e" '(eval-expression)
    "e l" 'eval-last-sexp
    "e r" 'eval-region)

  (my/leader-keys
    "f" '(:ignore t :wk "Files")    
    "f c" '((lambda () (interactive)
              (find-file "~/.config/emacs/config.org")) 
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired "~/.config/emacs/")) 
            :wk "Open user-emacs-directory in dired")
    "f d" '(:ignore t :wk "Dotfiles")
    "f D" 'find-grep-dired
    "f g" 'counsel-grep-or-swiper
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs/init.el")) 
            :wk "Open emacs init.el")
    "f j" '((lambda () (interactive)
              (find-file (concat org-directory "/journal.org")) )
            :wk "Open emacs journal.org")
    "f J" 'counsel-file-jump
    "f l" 'counsel-locate
    "f r" 'counsel-recentf
    "f u" 'sudo-edit-find-file
    "f U" 'sudo-edit)

 (my/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" 'counsel-apropos
    "h b" 'describe-bindings
    "h c" 'describe-char
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" 'about-emacs
    "h d d" 'view-emacs-debugging
    "h d f" 'view-emacs-FAQ
    "h d m" 'info-emacs-manual
    "h d n" 'view-emacs-news
    "h d o" 'describe-distribution
    "h d p" 'view-emacs-problems
    "h d t" 'view-emacs-todo
    "h d w" 'describe-no-warranty
    "h e" 'view-echo-area-messages
    "h f" 'describe-function
    "h F" 'describe-face
    "h g" 'describe-gnu-project
    "h i" 'info
    "h I" 'describe-input-method
    "h k" 'describe-key
    "h l" 'view-lossage
    "h L" 'describe-language-environment
    "h m" 'describe-mode
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" 'load-theme
    "h v" 'describe-variable
    "h w" 'where-is
    "h x" 'describe-command)

  (my/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" 'org-agenda
    "m e" 'org-export-dispatch
    "m i" 'org-toggle-item
    "m t" 'org-todo
    "m B" 'org-babel-tangle
    "m T" 'org-todo-list)

  (my/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" 'org-table-insert-hline)

  (my/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" 'org-time-stamp
    "m d i" 'org-clock-in
    "m d o" 'org-clock-out)

  (my/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" 'dashboard-open
    "o e" 'elfeed
    "o f" 'make-frame
    "o F" 'select-frame-by-name)

  ;; projectile-command-map already has a ton of bindings 
  ;; set for us, so no need to specify each individually.
  (my/leader-keys
    "p" 'projectile-command-map)

  (my/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" 'dictionary-search
    "s m" 'man
    "s t" 'tldr
    "s w" 'woman)

  (my/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" 'eshell-toggle
    "t f" 'flycheck-mode
    "t l" 'display-line-numbers-mode
    "t n" 'neotree-toggle
    "t o" 'org-mode
    "t r" 'rainbow-mode
    "t t" 'visual-line-mode)

  (my/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" 'evil-window-delete
    "w n" 'evil-window-new
    "w s" 'evil-window-split
    "w v" 'evil-window-vsplit
    ;; Window motions
    "w h" 'evil-window-left
    "w j" 'evil-window-down
    "w k" 'evil-window-up
    "w l" 'evil-window-right
    "w w" 'evil-window-next
    ;; Move Windows
    "w H" 'buf-move-left
    "w J" 'buf-move-down
    "w K" 'buf-move-up
    "w L" 'buf-move-right)
)

#+end_src

** TODO list
#+begin_src emacs-lisp
  (setq org-todo-keywords
      '((sequence "TODO(t!)" "NEXT(n!)" "PROG(p!)" "BLOCKED(b@/!)" "?(?!)" "TO DELEGATE(2!)" "DELEGATED(g@/!)" "FOLLOWUP(f!)" "FORWARDED(>@/!)" "ADJOURNED(a!)" "TICKLE(T!)" "|" "CANCELED(c!)" "DONE(d!)")))

  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("PROG" . "#E35DBF")
          ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
          ("DELEGATED" . "pink")
          ("NEXT" . "#008080")))

;;TODO check this out/change entries
  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** Org hook stuff

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (or (string-equal (buffer-file-name)
                      (concat (expand-file-name user-emacs-directory) "config.org"))
            (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/emacs/.config/emacs/config.org")))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda ()
                          (add-hook 'after-save-hook #'efs/org-babel-tangle-config)
                          (evil-define-key 'normal org-mode-map (kbd "t") 'org-todo)))

#+end_src

** Babel tangle
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

* GIT PROGRAMS
** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
      (use-package counsel
        :after ivy
        :diminish
        :config 
          (counsel-mode)
          (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

      (use-package ivy
        :bind
        ;; ivy-resume resumes the last Ivy-based completion.
        (("C-s" . swiper)
         ("C-c C-r" . ivy-resume)
         ("C-x b" . ido-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
        :diminish
        :custom
        (setq ivy-use-virtual-buffers t)
        (setq ivy-count-format "(%d/%d) ")
        (setq enable-recursive-minibuffers t)
        :config
        (ivy-mode)
        ;; by default counsel-M-x starts with ^, which means your fuzzy search must start with what you type
        (ivy-configure 'counsel-M-x
            :initial-input ""))

      (use-package all-the-icons-ivy-rich
        :ensure t
        :init (all-the-icons-ivy-rich-mode 1))

      (use-package ivy-rich
        :after ivy
        :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
        :custom
        (ivy-virtual-abbreviate 'full
         ivy-rich-switch-buffer-align-virtual-buffer t
         ivy-rich-path-style 'abbrev)
        :config
        (ivy-set-display-transformer 'ivy-switch-buffer
                                         'ivy-rich-switch-buffer-transformer))

#+end_src

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package lua-mode)
(use-package php-mode)
#+end_src

* LSP

#+begin_src emacs-lisp
(defun my/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . my/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))
#+end_src

* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+end_src

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Superstar
Org-superstar gives us attractive bullets rather than asterisks and is a kind of replacement for org-bullets (no longer maintained).

#+begin_src emacs-lisp
(use-package org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Diminish Org Indent Mode
Removes "Ind" from showing in the modeline.

#+begin_src emacs-lisp
(eval-after-load 'org-indent '(diminish 'org-indent-mode))
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Directories
#+begin_src emacs-lisp
  (setq org-directory (or (getenv "ZETTEL_BASE") "~/org"))
  (setq templates_dir (or (getenv "ORG_TEMPLATES_DIR") "~/org/templates"))
#+end_src

** Enforcements/one-line config options
#+begin_src emacs-lisp
  (setq org-track-ordered-property-with-tag t)
  (setq org-use-property-inheritance t)
  (setq org-log-into-drawer "LOGBOOK") ;when adding a note, put them in logbook drawer
  (setq org-log-reschedule 'time) ;puts a note in logbook drawer when a task is rescheudled
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-M-RET-may-split-line nil)
  (setq org-ellipsis " ▾")
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2))) ; any agenda file will show up in the list when choosing to refile
#+end_src

** Clocking in/out
#+begin_src emacs-lisp
(setq org-clock-in-switch-to-state "PROG")
(setq org-clock-out-switch-to-state "?")
(defun my/org-clock-jump-to-current-clock ()
  (interactive)
  (org-clock-jump-to-current-clock))
#+end_src

** Tags
#+begin_src emacs-lisp
  (setq org-tag-alist '(("NEW" . ?N)
                        (:startgroup . nil)
                        ("INCIDENT" . ?i)
                        ("NUCLEUS_INC" . ?n)
                        ("TRAINING" . ?r)
                        ("EMAIL_SUPPORT" . ?e)
                        ("SCRIPTING" . ?s)
                        ("CUST_MEETING" . ?c)
                        ("TCS_MEETING" . ?t)
                        ("CRQ" . ?C)
                        ("MISC" . ?m)
                        ("W_O_REQ" . ?w)))

#+end_src

** Autocmds
#+begin_src emacs-lisp
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  (advice-add 'org-capture :after (lambda ()
                                    (interactive)
                                    (org-save-all-org-buffers)
                                    ;; (Re)set org-agenda files. Spacemacs auto-updates the list list above in custom-set-variables
                                    (setq org-agenda-files ;Adds all .org files to agenda unless they are in the archive folder
                                          (seq-filter (lambda(x) 
                                                      (not (string-match "/archive/"(file-name-directory x)))
                                                      (not (string-match "/03-resources/"(file-name-directory x))))
                                                      (directory-files-recursively org-directory "\\.org$")
                                                      ))
                                    ))

#+end_src

*** Capture template functions
#+begin_src emacs-lisp
(defun my/generate-new-store-file-name () "Ask for a title and generate a file name based on it"
       (interactive)
       (let* ((store_nbr (read-string "Store #: "))
              (my-path (concat
			      org-directory
                        "/2-areas/str"
                        store_nbr
                        ".org")))
         (setq my/org-capture-store_nbr store_nbr)
         (setq my/org-capture-store_nbr-file_path my-path)) ; Save variable to be used later in the template
       my/org-capture-store_nbr-file_path)
(defun my/ask-store-nbr-inc () "Ask for a title and generate a file name based on it"
       (interactive)
       (let ((store_nbr (read-string "Store #: "))
              (inc (read-string "Incident #: ")))
         (setq my/org-capture-store_nbr store_nbr)
         (setq my/org-capture-inc inc)) ; Save variable to be used later in the template
       (concat "str" my/org-capture-store_nbr))
(defun my/generate-new-script-file-name () "Ask for a title and generate a file name based on it"
       (let* ((script_name (read-string "Script Name: "))
              (my-path (concat
			      org-directory
                        "/1-projects/script_"
                        script_name
                        ".org")))
         (setq my/org-capture-script-name script_name)
         (setq my/org-capture-script-file-path my-path)) ; Save variable to be used later in the template
       my/org-capture-script-file-path)
#+end_src

** Capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(
          ("S" "Store" entry
           (file (lambda() (interactive) (my/generate-new-store-file-name)))
           (file  ,(concat templates_dir "/store-template.txt")))
          ("I" "Incident" entry
           (file+function buffer-file-name (lambda () 
                                            (org-back-to-heading)
                                            (org-element-property :end (org-element-at-point))))
           (file  ,(concat templates_dir "/inc-template.txt")))
          ("t" "TODO entry" entry
           (file+headline "journal.org" "Capture")
           "* TODO %^{Description} :NEW:\n  Desired outcome: %?\n  :LOGBOOK:\n  - Added: %U\n  :END:"
           :empty-lines-before 1)
          ("i" "Incoming Phone call" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           (file "templates/in-call-template.txt"))
          ("o" "Outgoing Phone call" entry
           (file+headline "journal.org" "Capture")
           (file  ,(concat templates_dir "/out-call-template.txt")))
          ("e" "Email" entry
           (file+headline "journal.org" "Capture")
           (file  ,(concat templates_dir "/email-template.txt")))
          ("s" "Script" entry
           (file (lambda() (interactive) (my/generate-new-script-file-name)))
           (file  ,(concat templates_dir "/script-template.txt")))
          ("m" "Meeting")
          ("mc" "Checkpoint - T1/T2" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* Checkpoint T1/T2 :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a") 
                " 09:30>")
           :immediate-finish t)
          ("mg" "Generic" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* %^{Title: } :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a")
                ">")
           :immediate-finish t)
          ("mj" "JTF" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* JTF :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a") 
                " 10:45>")
           :immediate-finish t)
          ("mn" "Nucleus Blocker" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* Nucleus Blocker :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a") 
                " 08:30>")
           :immediate-finish t)
          ("mN" "Nucleus Scrum" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* Nucleus Scrum :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a") 
                " 13:00>")
           :immediate-finish t)
          ("mt" "Team meeting" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* Team Meeting :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a") 
                " 11:30>")
           :immediate-finish t)
          ("mw" "Workarounds (CSS scripts/jobs)" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           ,(concat 
                 "* Workarounds (CSS scripts/jobs) :CUST_MEETING:\nSCHEDULED: <" 
                (format-time-string "%Y-%m-%d %a") 
                " 09:30>")
           :immediate-finish t)
          ("j" "Journal entry" entry
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           "* %U - %^{Activity}")
          ("d" "Daily plan" plain
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           (file  ,(concat templates_dir "/tpl-daily-plan.txt"))
           :immediate-finish t)
          ("w" "Daily plan" plain
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           (file  ,(concat templates_dir "/tpl-weekly-plan.txt"))
           :immediate-finish t)
          ("m" "Monthly plan" plain
           (file+headline "journal.org" ,(format-time-string "%Y-%m-%d %A"))
           (file  ,(concat templates_dir "/tpl-monthly-plan.txt"))
           :immediate-finish t)
          ))
#+end_src

** Agenda stuff
#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks t)
(setq org-agenda-window-setup 'only-window)
(setq org-agenda-use-time-grid t)
(setq org-agenda-start-with-log-mode t)
(setq org-agenda-custom-commands
      (quote
       (
        ("A" . "Agendas")
        ("AT" "Daily overview"
         ((tags-todo "NEW"
                     ((org-agenda-overriding-header "New, needs tagging")))
          (tags-todo "TODO=\"?\""
                     ((org-agenda-overriding-header "Pending TODO state update")))
          (tags-todo "TICKLE"
                     ((org-agenda-overriding-header "Tickler")))
          (tags-todo "TODO=\"BLOCKED\""
                     ((org-agenda-overriding-header "Blocked")))
          (agenda ""
                  ((org-agenda-overriding-header "Today")
                   (org-agenda-span 1)
                   (org-agenda-sorting-strategy
                    (quote
                     (time-up priority-down)))))
          (tags-todo "TODO=\"TODO\"|TODO=\"NEXT\""
                     ((org-agenda-overriding-header "All Todos"))))
          nil nil)
        ("AW" "Weekly overview" agenda ""
         ((org-agenda-overriding-header "Weekly overview")))
        ("AM" "Monthly overview" agenda ""
         ((org-agenda-overriding-header "Monthly overview"))
         (org-agenda-span
          (quote month))
         (org-deadline-warning-days 0)
         (org-agenda-sorting-strategy
          (quote
           (time-up priority-down tag-up))))
        ("D" . "DAILY Review Helper")
        ("Dn" "New tasks" tags "NEW"
         ((org-agenda-overriding-header "NEW Tasks")))
        ("Dp" "Pending Set State" tags-todo "?"
         ((org-agenda-overriding-header "Tasks Pending Set State")))
        ("Dd" "Check DELEGATED tasks" todo "DELEGATED"
         ((org-agenda-overriding-header "DELEGATED tasks")))
        ("Db" "Check BLOCKED tasks" todo "BLOCKED"
         ((org-agenda-overriding-header "BLOCKED tasks")))
        ("Df" "Check finished tasks" todo "DONE|CANCELLED|FORWARDED"
         ((org-agenda-overriding-header "Finished tasks")))
        ("DP" "Planing ToDos (unscheduled) only" todo "TODO|NEXT"
         ((org-agenda-overriding-header "Planning overview")
          (org-agenda-skip-function
           (quote
            (org-agenda-skip-entry-if
             (quote scheduled)
             (quote deadline)))))))
       ))
(setq org-agenda-include-diary t)
(setq org-agenda-files ;Adds all .org files to agenda unless they are in the archive folder
      (seq-filter (lambda(x) (not (string-match "/archive/"(file-name-directory x))))
                  (directory-files-recursively org-directory "\\.org$")
                  ))
#+end_src

* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+begin_src emacs-lisp
(use-package perspective
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init 
  (persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/.config/emacs/sessions"))

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)

#+end_src

* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs.  I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* SANE DEFAULTS
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq display-line-numbers 'relative)
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(setq display-line-numbers 'relative)
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.

#+end_src

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

* THEME
The first line below designates the directory where will place all of our custom-made themes, which I have created only one (dtmacs).  You can create your own Emacs themes with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].  I am also installing =doom-themes= because it contains a huge collection of themes.  M-x load-theme will list all of the themes available.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Sets the default theme to load!!! 
  (load-theme 'doom-dark+ t)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* TLDR

#+begin_src emacs-lisp
(use-package tldr)

#+end_src

* TRANSPARENCY
With Emacs version 29, true transparency has been added.  I have turned transparency off by setting the alpha to '100'.  If you want some slight transparency, try setting alpha to '90'.  Of course, if you set alpha to '0', the background of Emacs would completely transparent.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth

#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src
